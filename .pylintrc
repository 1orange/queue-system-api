[MASTER]
# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=
    ujson,

load-plugins=
    pylint.extensions.bad_builtin,
    pylint.extensions.check_elif,
    pylint.extensions.comparetozero,
    pylint.extensions.docparams,
    pylint.extensions.docstyle,
    pylint.extensions.emptystring,
    pylint.extensions.mccabe,
    pylint.extensions.overlapping_exceptions,
    pylint.extensions.redefined_variable_type,

# Pickle collected data for later comparisons.
persistent=no

[MESSAGES CONTROL]

enable=all

disable=
    # I,  # enable once there are too many suppressed messages
    # Disabled bad-continuation due to conflicts with black. We finally decided
    # to just accept black "as is" even in this instance.
    bad-continuation,
    # duplicate-code,
    missing-module-docstring,
    missing-class-docstring,
    missing-function-docstring,
    docstring-first-line-empty,
    invalid-name,  # too strict check
    too-few-public-methods,  # Not so helpful for us (basically too strict).
    logging-fstring-interpolation, # f-string usage
    line-too-long, # Line length ignore

[REPORTS]
# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details
msg-template='{path}:{line}: [{msg_id}({symbol}), {obj}] {msg})'

# Set the output format. Available formats are text, parseable, colorized, json
# and msvs (visual studio).You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=colorized

# Tells whether to display a full report or only the messages
reports=no

# Activate the evaluation score.
score=no

django-settings-module=device_settings.settings